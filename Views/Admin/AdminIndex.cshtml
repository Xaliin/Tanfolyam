@{
    ViewData["Title"] = "Adminisztráció";
}

<section class="maintext">
    <h1>Adminisztrációs felület</h1><hr />
</section>
<section class="adminsection">
    <div>
        <h3>Egyenleg módosítása</h3>
        <form asp-action="AddBudget">
            + <input type="number" name="budget" class="admininput" placeholder="..." /> Ft <select class="admininput" name="userId" asp-controller="Admin" asp-items="ViewBag.Users"></select> számára
            <button type="submit" class="save-btn">Mentés</button>
        </form>
    </div>
</section>
<section class="adminsection">
    <div>
        <a asp-area="Admin" asp-controller="Admin" asp-action="TeacherListing"><h3>Oktató felvétele</h3></a>
    </div>
</section>
<section class="adminsection">
    <a asp-area="Admin" asp-controller="Admin" asp-action="CourseListing"><h3>Tanfolyamok hozzáadása/módosítása/törlése</h3></a>
</section>
<section>
    <h3>Statisztika</h3>
</section>

<h4>Tanárok kurzusaira járó alkalmazottak száma</h4>

<form id="dateFilterForm">
    <label for="startDate">Ettől:</label>
    <input type="datetime-local" class="admininput" id="startDate" name="startDate" required>
    
    <label for="endDate">Eddig:</label>
    <input type="datetime-local" class="admininput" id="endDate" name="endDate" required>
    
    <button type="button" onclick="fetchChartData()" class="save-btn">Lekérés</button>
</form>

<canvas id="teacherPieChart" width="400" height="400"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let chartInstance = null; 

function fetchChartData() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    if (!startDate || !endDate) {
        alert('Please select both start and end dates.');
        return;
    }

    fetch(`/Admin/GetChartDataForAmoutOfStudentsPerTeacher?startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`)
        .then(response => response.json())
        .then(data => {
            const labels = Object.keys(data); 
            const values = Object.values(data); 

            const ctx = document.getElementById('teacherPieChart').getContext('2d');

            if (labels.length === 0 || values.length === 0) {
                alert('No data available for the selected date range.');
                

                if (chartInstance) {
                    chartInstance.destroy();
                }
                return;
            }


            if (chartInstance) {
                chartInstance.destroy();
            }


            chartInstance = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.6)',
                            'rgba(54, 162, 235, 0.6)',
                            'rgba(255, 206, 86, 0.6)',
                            'rgba(75, 192, 192, 0.6)',
                            'rgba(153, 102, 255, 0.6)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        },
                        title: {
                            display: true,
                            text: 'Number of Students per Teacher (Filtered)'
                        }
                    }
                }
            });
        })
        .catch(error => console.error('Error fetching data:', error));
}
</script>

<h4>Kurzusok szerinti bevétel</h4>

<form id="incomeDateFilterForm">
    <label for="startDate">Ettől:</label>
    <input type="datetime-local" class="admininput" id="incomeStartDate" name="startDate" required>
    
    <label for="endDate">Eddig:</label>
    <input type="datetime-local" class="admininput" id="incomeEndDate" name="endDate" required>
    
    <button type="button" onclick="fetchCourseIncomeData()" class="save-btn">Lekérés</button>
</form>

<canvas id="courseIncomeChart" width="400" height="400"></canvas>

<script>
    let courseIncomeChartInstance = null; // Variable to store the chart instance

    function fetchCourseIncomeData() {
        // Get the date range values
        const startDate = document.getElementById('incomeStartDate').value;
        const endDate = document.getElementById('incomeEndDate').value;

        // Validate input
        if (!startDate || !endDate) {
            alert('Please select both start and end dates.');
            return;
        }

        // Fetch data from the API with query parameters
        fetch(`/Admin/GetChartDataForIncomeFromCourses?startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`)
            .then(response => response.json())
            .then(data => {
                const labels = Object.keys(data); // Course names
                const values = Object.values(data); // Income values

                const ctx = document.getElementById('courseIncomeChart').getContext('2d');

                // Check if the data is empty
                if (labels.length === 0 || values.length === 0) {
                    alert('No data available for the selected date range.');

                    // Destroy existing chart if it exists
                    if (courseIncomeChartInstance) {
                        courseIncomeChartInstance.destroy();
                    }

                    return; // Exit function
                }

                // Destroy existing chart before creating a new one
                if (courseIncomeChartInstance) {
                    courseIncomeChartInstance.destroy();
                }

                // Create a new chart instance
                courseIncomeChartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Income ($)',
                            data: values,
                            backgroundColor: 'rgba(75, 192, 192, 0.6)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false // Hide the legend since there's only one dataset
                            },
                            title: {
                                display: true,
                                text: 'Income Generated by Courses (Filtered)'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '$' + value; // Format as currency
                                    }
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error fetching data:', error));
    }
</script>